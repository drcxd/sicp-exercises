#+title: Exercise 4.69

#+begin_src scheme
  (rule (end-with-grandson (grandson)))
  (rule (end-with-grandson (?x . ?y))
        (end-with-grandson ?y))
  (rule (has-relationship (?rel) ?x ?y)
        (?rel ?x ?y))
  (rule ((great . ?rel) ?x ?y)
        (and (end-with-grandson ?rel)
             (son ?x ?z)
             (or (?rel ?z ?y)
                 (has-relationship ?rel ?z ?y))))
#+end_src

~has-relationship~ is used to extract ~grandson~ from the list, when ~?rel~
is unified as ~(grandson)~.

Code to test the solution:

#+begin_src scheme
  (process-multiple-input '((assert! (rule (end-with-grandson (grandson))))
                            (assert! (rule (end-with-grandson (?x . ?y))
                                           (end-with-grandson ?y)))
                            (assert! (rule (has-relationship (?rel) ?x ?y)
                                           (?rel ?x ?y)))
                            (assert! (rule ((great . ?rel) ?x ?y)
                                           (and (end-with-grandson ?rel)
                                                (son ?x ?z)
                                                (or (?rel ?z ?y)
                                                    (has-relationship ?rel ?z ?y)))))))
#+end_src

The code from exercise 4.63 is also required.

Also, to correctly evaluate ~(?rel Adam Irad)~, the query system has to
implement the loop detector described in exercise 4.67.
