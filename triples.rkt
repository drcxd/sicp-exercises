#lang sicp

(#%require "./stream.rkt")
(#%require "./interleave.rkt")
(#%require "./pairs.rkt")
(#%require "./integers.rkt")
;; Exercise 3.69

;; All triples can be generated by combining 1 with all pairs starting
;; with (1, 1); combining 2 with all pairs starting with (2, 2), ...

(define (triples s1 s2 s3)
  (cons-stream
   (list (stream-car s1) (stream-car s2) (stream-car s3))
   (interleave
    (stream-map (lambda (x) (list (stream-car s1) (stream-car s2) x))
                (stream-cdr s3))
    (interleave (stream-map (lambda (x) (cons (stream-car s1) x))
                            (pairs (stream-cdr s2) (stream-cdr s3)))
                (triples (stream-cdr s1) (stream-cdr s2) (stream-cdr s3))))))

(define pythagorean-triples
  (stream-filter (lambda (triple)
                   (let ((x (car triple))
                         (y (cadr triple))
                         (z (caddr triple)))
                     (= (+ (* x x) (* y y)) (* z z))))
                 (triples integers integers integers)))
