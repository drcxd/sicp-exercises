#lang sicp

(#%require "./evaluator.rkt")
(#%require "./environment.rkt")
(#%require "./evaluator-procedure.rkt")
(#%require "./evaluator-quote.rkt")
(#%require "./evaluator-definition.rkt")
(#%require "./evaluator-assignment.rkt")
(#%require "./evaluator-if.rkt")
(#%require "./evaluator-lambda.rkt")
(#%require "./evaluator-begin.rkt")
(#%require "./evaluator-cond.rkt")

(define input-prompt ";;; M-Eval input:")
(define output-prompt ";;; M-Eval output:")
(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (let ((output (my-eval input the-global-environment)))
      (announce-output output-prompt)
      (user-print output)))
  (driver-loop))
(define (prompt-for-input string)
  (newline)
  (newline)
  (display string)
  (newline))
(define (announce-output string)
  (newline)
  (display string)
  (newline))
(define (user-print object)
  (if (compound-procedure? object)
      (display (list 'compound-procedure
                     (procedure-parameters object)
                     (procedure-body object)
                     '<procedure-env>))
      (display object)))

;; install packages for evaluator

(install-quote-to-evaluator!)
(install-definition!)
(install-assignment-to-evaluator!)
(install-if!)
(install-lambda!)
(install-begin!)
(install-cond!)

;; launch the driver loop
(driver-loop)
